# -*- coding: utf-8 -*-
"""intel image classsification using cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H9rCe8bhbqbOJeLxHw9SUO-SjkAAHdwx
"""



! pip install -q kaggle

from google.colab import files

files.upload()

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/


! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets list

! kaggle datasets download -d puneet6060/intel-image-classification

import zipfile

!unzip intel-image-classification.zip

import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import keras
from keras.preprocessing.image import ImageDataGenerator #can be used for data augmentation, matching labels with images

from keras import models,layers #for building model

train_image_generator = ImageDataGenerator(rescale=1./255) # Generator for our training dat
test_image_generator = ImageDataGenerator(rescale=1./255) # Generator for our testing data

# the flow_from_directory method load images from the disk, applies rescaling, and resizes the images into the required dimensions.
train_data_gen = train_image_generator.flow_from_directory(batch_size=32,
                                                           directory='/content/seg_train/seg_train', #importing training dataset
                                                           shuffle=True, #randomizing data.
                                                           target_size=(150,150), #reshaping for cnn
                                                           class_mode='categorical') #used when we have multiple classes in output.

"""same as train class but implement below code on test class."""

#each sub folder will be considered as a class
test_data_gen=test_image_generator.flow_from_directory(batch_size=32,
                                                       target_size=(150,150),
                                                       directory='/content/seg_test/seg_test',
                                                       class_mode='categorical')

train_data_gen.class_indices #index value of classes

Checkpoint_cb = keras.callbacks.ModelCheckpoint("early_stop_model.h5",
save_best_only=True)

Early_stopping_cb = keras.callbacks.EarlyStopping(patience=10,
restore_best_weights=True)

model = models.Sequential() #creating sequential cnn model
model.add(layers.Conv2D(32, (3, 3), activation='relu',padding='valid', input_shape=(150, 150, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu',padding='valid'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu',padding='valid'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(256, (3, 3), activation='relu',padding='valid'))

model.summary()

model.add(layers.Flatten())
model.add(layers.Dense(512, activation='relu'))
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(6, activation='softmax'))

model.summary()

model.compile(optimizer='sgd',
              loss = tf.losses.CategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.fit(train_data_gen,steps_per_epoch=438,epochs=70,validation_data=test_data_gen,validation_steps=93,callbacks =[Checkpoint_cb,Early_stopping_cb])
#validation step is given by test image/batch size #93 validation steps are given i.e., 93 time test data of batch size 32 is sent and processed one by one are given per epoch... which will retrun accuracy of predicted a

#saving model and loading model
model.save('intel image classsification using cnn.h5')
from tensorflow.keras.models import load_model
model = load_model('/content/intel image classsification using cnn.h5')

#accuracy for test data
#model.evaluate(x=test_data_gen)

pwd

#predict
pred_data_gen=test_image_generator.flow_from_directory(batch_size=1,
                                                       target_size=(150,150),
                                                       directory='/content/seg_pred',
                                                       class_mode='categorical')

class_names = ['buildings','forest','glacier','mountain','sea','street']